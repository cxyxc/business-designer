/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      EnumType: EnumTypeObject
      EnumProp: EnumPropObject
      EnumTypeConnection: EnumTypeConnectionObject
      PageInfo: PageInfoObject
      EnumTypeEdge: EnumTypeEdgeObject
      AggregateEnumType: AggregateEnumTypeObject
      EnumPropConnection: EnumPropConnectionObject
      EnumPropEdge: EnumPropEdgeObject
      AggregateEnumProp: AggregateEnumPropObject
      Bo: BoObject
      BoProp: BoPropObject
      BoConnection: BoConnectionObject
      BoEdge: BoEdgeObject
      AggregateBo: AggregateBoObject
      BoPropConnection: BoPropConnectionObject
      BoPropEdge: BoPropEdgeObject
      AggregateBoProp: AggregateBoPropObject
      Page: PageObject
      PageConnection: PageConnectionObject
      PageEdge: PageEdgeObject
      AggregatePage: AggregatePageObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      EnumTypeSubscriptionPayload: EnumTypeSubscriptionPayloadObject
      EnumTypePreviousValues: EnumTypePreviousValuesObject
      EnumPropSubscriptionPayload: EnumPropSubscriptionPayloadObject
      EnumPropPreviousValues: EnumPropPreviousValuesObject
      BoSubscriptionPayload: BoSubscriptionPayloadObject
      BoPreviousValues: BoPreviousValuesObject
      BoPropSubscriptionPayload: BoPropSubscriptionPayloadObject
      BoPropPreviousValues: BoPropPreviousValuesObject
      PageSubscriptionPayload: PageSubscriptionPayloadObject
      PagePreviousValues: PagePreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      EnumType: EnumTypeFieldDetails
      EnumProp: EnumPropFieldDetails
      EnumTypeConnection: EnumTypeConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      EnumTypeEdge: EnumTypeEdgeFieldDetails
      AggregateEnumType: AggregateEnumTypeFieldDetails
      EnumPropConnection: EnumPropConnectionFieldDetails
      EnumPropEdge: EnumPropEdgeFieldDetails
      AggregateEnumProp: AggregateEnumPropFieldDetails
      Bo: BoFieldDetails
      BoProp: BoPropFieldDetails
      BoConnection: BoConnectionFieldDetails
      BoEdge: BoEdgeFieldDetails
      AggregateBo: AggregateBoFieldDetails
      BoPropConnection: BoPropConnectionFieldDetails
      BoPropEdge: BoPropEdgeFieldDetails
      AggregateBoProp: AggregateBoPropFieldDetails
      Page: PageFieldDetails
      PageConnection: PageConnectionFieldDetails
      PageEdge: PageEdgeFieldDetails
      AggregatePage: AggregatePageFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      EnumTypeSubscriptionPayload: EnumTypeSubscriptionPayloadFieldDetails
      EnumTypePreviousValues: EnumTypePreviousValuesFieldDetails
      EnumPropSubscriptionPayload: EnumPropSubscriptionPayloadFieldDetails
      EnumPropPreviousValues: EnumPropPreviousValuesFieldDetails
      BoSubscriptionPayload: BoSubscriptionPayloadFieldDetails
      BoPreviousValues: BoPreviousValuesFieldDetails
      BoPropSubscriptionPayload: BoPropSubscriptionPayloadFieldDetails
      BoPropPreviousValues: BoPropPreviousValuesFieldDetails
      PageSubscriptionPayload: PageSubscriptionPayloadFieldDetails
      PagePreviousValues: PagePreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      EnumTypeWhereUniqueInput: EnumTypeWhereUniqueInputInputObject
      EnumPropWhereInput: EnumPropWhereInputInputObject
      EnumTypeWhereInput: EnumTypeWhereInputInputObject
      EnumPropWhereUniqueInput: EnumPropWhereUniqueInputInputObject
      BoWhereUniqueInput: BoWhereUniqueInputInputObject
      BoPropWhereInput: BoPropWhereInputInputObject
      BoWhereInput: BoWhereInputInputObject
      BoPropWhereUniqueInput: BoPropWhereUniqueInputInputObject
      PageWhereUniqueInput: PageWhereUniqueInputInputObject
      PageWhereInput: PageWhereInputInputObject
      EnumTypeCreateInput: EnumTypeCreateInputInputObject
      EnumPropCreateManyInput: EnumPropCreateManyInputInputObject
      EnumPropCreateInput: EnumPropCreateInputInputObject
      EnumTypeUpdateInput: EnumTypeUpdateInputInputObject
      EnumPropUpdateManyInput: EnumPropUpdateManyInputInputObject
      EnumPropUpdateWithWhereUniqueNestedInput: EnumPropUpdateWithWhereUniqueNestedInputInputObject
      EnumPropUpdateDataInput: EnumPropUpdateDataInputInputObject
      EnumPropUpsertWithWhereUniqueNestedInput: EnumPropUpsertWithWhereUniqueNestedInputInputObject
      EnumPropScalarWhereInput: EnumPropScalarWhereInputInputObject
      EnumPropUpdateManyWithWhereNestedInput: EnumPropUpdateManyWithWhereNestedInputInputObject
      EnumPropUpdateManyDataInput: EnumPropUpdateManyDataInputInputObject
      EnumTypeUpdateManyMutationInput: EnumTypeUpdateManyMutationInputInputObject
      EnumPropUpdateInput: EnumPropUpdateInputInputObject
      EnumPropUpdateManyMutationInput: EnumPropUpdateManyMutationInputInputObject
      BoCreateInput: BoCreateInputInputObject
      BoPropCreateManyWithoutLinkBoInput: BoPropCreateManyWithoutLinkBoInputInputObject
      BoPropCreateWithoutLinkBoInput: BoPropCreateWithoutLinkBoInputInputObject
      EnumTypeCreateOneInput: EnumTypeCreateOneInputInputObject
      BoCreateManyInput: BoCreateManyInputInputObject
      BoUpdateInput: BoUpdateInputInputObject
      BoPropUpdateManyWithoutLinkBoInput: BoPropUpdateManyWithoutLinkBoInputInputObject
      BoPropUpdateWithWhereUniqueWithoutLinkBoInput: BoPropUpdateWithWhereUniqueWithoutLinkBoInputInputObject
      BoPropUpdateWithoutLinkBoDataInput: BoPropUpdateWithoutLinkBoDataInputInputObject
      EnumTypeUpdateOneInput: EnumTypeUpdateOneInputInputObject
      EnumTypeUpdateDataInput: EnumTypeUpdateDataInputInputObject
      EnumTypeUpsertNestedInput: EnumTypeUpsertNestedInputInputObject
      BoPropUpsertWithWhereUniqueWithoutLinkBoInput: BoPropUpsertWithWhereUniqueWithoutLinkBoInputInputObject
      BoPropScalarWhereInput: BoPropScalarWhereInputInputObject
      BoPropUpdateManyWithWhereNestedInput: BoPropUpdateManyWithWhereNestedInputInputObject
      BoPropUpdateManyDataInput: BoPropUpdateManyDataInputInputObject
      BoUpdateManyInput: BoUpdateManyInputInputObject
      BoUpdateWithWhereUniqueNestedInput: BoUpdateWithWhereUniqueNestedInputInputObject
      BoUpdateDataInput: BoUpdateDataInputInputObject
      BoUpsertWithWhereUniqueNestedInput: BoUpsertWithWhereUniqueNestedInputInputObject
      BoScalarWhereInput: BoScalarWhereInputInputObject
      BoUpdateManyWithWhereNestedInput: BoUpdateManyWithWhereNestedInputInputObject
      BoUpdateManyDataInput: BoUpdateManyDataInputInputObject
      BoUpdateManyMutationInput: BoUpdateManyMutationInputInputObject
      BoPropCreateInput: BoPropCreateInputInputObject
      BoCreateOneWithoutPropsInput: BoCreateOneWithoutPropsInputInputObject
      BoCreateWithoutPropsInput: BoCreateWithoutPropsInputInputObject
      BoPropUpdateInput: BoPropUpdateInputInputObject
      BoUpdateOneWithoutPropsInput: BoUpdateOneWithoutPropsInputInputObject
      BoUpdateWithoutPropsDataInput: BoUpdateWithoutPropsDataInputInputObject
      BoUpsertWithoutPropsInput: BoUpsertWithoutPropsInputInputObject
      BoPropUpdateManyMutationInput: BoPropUpdateManyMutationInputInputObject
      PageCreateInput: PageCreateInputInputObject
      EnumTypeCreateManyInput: EnumTypeCreateManyInputInputObject
      PageUpdateInput: PageUpdateInputInputObject
      EnumTypeUpdateManyInput: EnumTypeUpdateManyInputInputObject
      EnumTypeUpdateWithWhereUniqueNestedInput: EnumTypeUpdateWithWhereUniqueNestedInputInputObject
      EnumTypeUpsertWithWhereUniqueNestedInput: EnumTypeUpsertWithWhereUniqueNestedInputInputObject
      EnumTypeScalarWhereInput: EnumTypeScalarWhereInputInputObject
      EnumTypeUpdateManyWithWhereNestedInput: EnumTypeUpdateManyWithWhereNestedInputInputObject
      EnumTypeUpdateManyDataInput: EnumTypeUpdateManyDataInputInputObject
      PageUpdateManyMutationInput: PageUpdateManyMutationInputInputObject
      EnumTypeSubscriptionWhereInput: EnumTypeSubscriptionWhereInputInputObject
      EnumPropSubscriptionWhereInput: EnumPropSubscriptionWhereInputInputObject
      BoSubscriptionWhereInput: BoSubscriptionWhereInputInputObject
      BoPropSubscriptionWhereInput: BoPropSubscriptionWhereInputInputObject
      PageSubscriptionWhereInput: PageSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    EnumPropOrderByInput: EnumPropOrderByInputValues,
    EnumTypeOrderByInput: EnumTypeOrderByInputValues,
    BoPropOrderByInput: BoPropOrderByInputValues,
    BoOrderByInput: BoOrderByInputValues,
    PageOrderByInput: PageOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'enumType', args?: QueryEnumTypeArgs[] | false, alias?: string  } 
  | { name: 'enumTypes', args?: QueryEnumTypesArgs[] | false, alias?: string  } 
  | { name: 'enumTypesConnection', args?: QueryEnumTypesConnectionArgs[] | false, alias?: string  } 
  | { name: 'enumProp', args?: QueryEnumPropArgs[] | false, alias?: string  } 
  | { name: 'enumProps', args?: QueryEnumPropsArgs[] | false, alias?: string  } 
  | { name: 'enumPropsConnection', args?: QueryEnumPropsConnectionArgs[] | false, alias?: string  } 
  | { name: 'bo', args?: QueryBoArgs[] | false, alias?: string  } 
  | { name: 'boes', args?: QueryBoesArgs[] | false, alias?: string  } 
  | { name: 'boesConnection', args?: QueryBoesConnectionArgs[] | false, alias?: string  } 
  | { name: 'boProp', args?: QueryBoPropArgs[] | false, alias?: string  } 
  | { name: 'boProps', args?: QueryBoPropsArgs[] | false, alias?: string  } 
  | { name: 'boPropsConnection', args?: QueryBoPropsConnectionArgs[] | false, alias?: string  } 
  | { name: 'page', args?: QueryPageArgs[] | false, alias?: string  } 
  | { name: 'pages', args?: QueryPagesArgs[] | false, alias?: string  } 
  | { name: 'pagesConnection', args?: QueryPagesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'enumType'
  | 'enumTypes'
  | 'enumTypesConnection'
  | 'enumProp'
  | 'enumProps'
  | 'enumPropsConnection'
  | 'bo'
  | 'boes'
  | 'boesConnection'
  | 'boProp'
  | 'boProps'
  | 'boPropsConnection'
  | 'page'
  | 'pages'
  | 'pagesConnection'


type QueryEnumTypeArgs =
  | 'where'
type QueryEnumTypesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEnumTypesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEnumPropArgs =
  | 'where'
type QueryEnumPropsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEnumPropsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBoArgs =
  | 'where'
type QueryBoesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBoesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBoPropArgs =
  | 'where'
type QueryBoPropsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryBoPropsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPageArgs =
  | 'where'
type QueryPagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPagesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  enumType: {
    type: 'EnumType'
    args: Record<QueryEnumTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EnumTypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumType | null> | prisma.EnumType | null
  }
  enumTypes: {
    type: 'EnumType'
    args: Record<QueryEnumTypesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EnumTypeWhereInput | null, orderBy?: prisma.EnumTypeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumType[]> | prisma.EnumType[]
  }
  enumTypesConnection: {
    type: 'EnumTypeConnection'
    args: Record<QueryEnumTypesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EnumTypeWhereInput | null, orderBy?: prisma.EnumTypeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumTypeConnection> | prisma.EnumTypeConnection
  }
  enumProp: {
    type: 'EnumProp'
    args: Record<QueryEnumPropArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EnumPropWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumProp | null> | prisma.EnumProp | null
  }
  enumProps: {
    type: 'EnumProp'
    args: Record<QueryEnumPropsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EnumPropWhereInput | null, orderBy?: prisma.EnumPropOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumProp[]> | prisma.EnumProp[]
  }
  enumPropsConnection: {
    type: 'EnumPropConnection'
    args: Record<QueryEnumPropsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EnumPropWhereInput | null, orderBy?: prisma.EnumPropOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumPropConnection> | prisma.EnumPropConnection
  }
  bo: {
    type: 'Bo'
    args: Record<QueryBoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: BoWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bo | null> | prisma.Bo | null
  }
  boes: {
    type: 'Bo'
    args: Record<QueryBoesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BoWhereInput | null, orderBy?: prisma.BoOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bo[]> | prisma.Bo[]
  }
  boesConnection: {
    type: 'BoConnection'
    args: Record<QueryBoesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BoWhereInput | null, orderBy?: prisma.BoOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoConnection> | prisma.BoConnection
  }
  boProp: {
    type: 'BoProp'
    args: Record<QueryBoPropArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: BoPropWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoProp | null> | prisma.BoProp | null
  }
  boProps: {
    type: 'BoProp'
    args: Record<QueryBoPropsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BoPropWhereInput | null, orderBy?: prisma.BoPropOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoProp[]> | prisma.BoProp[]
  }
  boPropsConnection: {
    type: 'BoPropConnection'
    args: Record<QueryBoPropsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: BoPropWhereInput | null, orderBy?: prisma.BoPropOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoPropConnection> | prisma.BoPropConnection
  }
  page: {
    type: 'Page'
    args: Record<QueryPageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Page | null> | prisma.Page | null
  }
  pages: {
    type: 'Page'
    args: Record<QueryPagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PageWhereInput | null, orderBy?: prisma.PageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Page[]> | prisma.Page[]
  }
  pagesConnection: {
    type: 'PageConnection'
    args: Record<QueryPagesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PageWhereInput | null, orderBy?: prisma.PageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageConnection> | prisma.PageConnection
  }
}
  

// Types for EnumType

type EnumTypeObject =
  | EnumTypeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'props', args?: EnumTypePropsArgs[] | false, alias?: string  } 
  | { name: 'wikiUrl', args?: [] | false, alias?: string  } 

type EnumTypeFields =
  | 'id'
  | 'name'
  | 'desc'
  | 'props'
  | 'wikiUrl'


type EnumTypePropsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface EnumTypeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  props: {
    type: 'EnumProp'
    args: Record<EnumTypePropsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EnumType">,
      args: { where?: EnumPropWhereInput | null, orderBy?: prisma.EnumPropOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumProp[]> | prisma.EnumProp[]
  }
  wikiUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EnumProp

type EnumPropObject =
  | EnumPropFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'key', args?: [] | false, alias?: string  } 
  | { name: 'value', args?: [] | false, alias?: string  } 

type EnumPropFields =
  | 'id'
  | 'key'
  | 'value'



  

export interface EnumPropFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  key: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  value: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EnumTypeConnection

type EnumTypeConnectionObject =
  | EnumTypeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EnumTypeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EnumTypeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EnumTypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EnumTypeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EnumTypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumTypeEdge[]> | prisma.EnumTypeEdge[]
  }
  aggregate: {
    type: 'AggregateEnumType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EnumTypeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEnumType> | prisma.AggregateEnumType
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EnumTypeEdge

type EnumTypeEdgeObject =
  | EnumTypeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EnumTypeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EnumTypeEdgeFieldDetails {
  node: {
    type: 'EnumType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EnumTypeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumType> | prisma.EnumType
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEnumType

type AggregateEnumTypeObject =
  | AggregateEnumTypeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEnumTypeFields =
  | 'count'



  

export interface AggregateEnumTypeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EnumPropConnection

type EnumPropConnectionObject =
  | EnumPropConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EnumPropConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EnumPropConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EnumPropConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EnumPropEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EnumPropConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumPropEdge[]> | prisma.EnumPropEdge[]
  }
  aggregate: {
    type: 'AggregateEnumProp'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EnumPropConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEnumProp> | prisma.AggregateEnumProp
  }
}
  

// Types for EnumPropEdge

type EnumPropEdgeObject =
  | EnumPropEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EnumPropEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EnumPropEdgeFieldDetails {
  node: {
    type: 'EnumProp'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EnumPropEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumProp> | prisma.EnumProp
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEnumProp

type AggregateEnumPropObject =
  | AggregateEnumPropFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEnumPropFields =
  | 'count'



  

export interface AggregateEnumPropFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Bo

type BoObject =
  | BoFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'props', args?: BoPropsArgs[] | false, alias?: string  } 
  | { name: 'wikiUrl', args?: [] | false, alias?: string  } 
  | { name: 'details', args?: BoDetailsArgs[] | false, alias?: string  } 

type BoFields =
  | 'id'
  | 'name'
  | 'desc'
  | 'props'
  | 'wikiUrl'
  | 'details'


type BoPropsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type BoDetailsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface BoFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  props: {
    type: 'BoProp'
    args: Record<BoPropsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Bo">,
      args: { where?: BoPropWhereInput | null, orderBy?: prisma.BoPropOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoProp[]> | prisma.BoProp[]
  }
  wikiUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  details: {
    type: 'Bo'
    args: Record<BoDetailsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Bo">,
      args: { where?: BoWhereInput | null, orderBy?: prisma.BoOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bo[]> | prisma.Bo[]
  }
}
  

// Types for BoProp

type BoPropObject =
  | BoPropFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'required', args?: [] | false, alias?: string  } 
  | { name: 'unique', args?: [] | false, alias?: string  } 
  | { name: 'redundant', args?: [] | false, alias?: string  } 
  | { name: 'linkBo', args?: [] | false, alias?: string  } 
  | { name: 'linkEnumType', args?: [] | false, alias?: string  } 

type BoPropFields =
  | 'id'
  | 'name'
  | 'desc'
  | 'type'
  | 'required'
  | 'unique'
  | 'redundant'
  | 'linkBo'
  | 'linkEnumType'



  

export interface BoPropFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  required: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  unique: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  redundant: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  linkBo: {
    type: 'Bo'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BoProp">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bo | null> | prisma.Bo | null
  }
  linkEnumType: {
    type: 'EnumType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BoProp">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumType | null> | prisma.EnumType | null
  }
}
  

// Types for BoConnection

type BoConnectionObject =
  | BoConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type BoConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface BoConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BoConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'BoEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"BoConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoEdge[]> | prisma.BoEdge[]
  }
  aggregate: {
    type: 'AggregateBo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BoConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateBo> | prisma.AggregateBo
  }
}
  

// Types for BoEdge

type BoEdgeObject =
  | BoEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type BoEdgeFields =
  | 'node'
  | 'cursor'



  

export interface BoEdgeFieldDetails {
  node: {
    type: 'Bo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BoEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bo> | prisma.Bo
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateBo

type AggregateBoObject =
  | AggregateBoFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateBoFields =
  | 'count'



  

export interface AggregateBoFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BoPropConnection

type BoPropConnectionObject =
  | BoPropConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type BoPropConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface BoPropConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BoPropConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'BoPropEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"BoPropConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoPropEdge[]> | prisma.BoPropEdge[]
  }
  aggregate: {
    type: 'AggregateBoProp'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BoPropConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateBoProp> | prisma.AggregateBoProp
  }
}
  

// Types for BoPropEdge

type BoPropEdgeObject =
  | BoPropEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type BoPropEdgeFields =
  | 'node'
  | 'cursor'



  

export interface BoPropEdgeFieldDetails {
  node: {
    type: 'BoProp'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BoPropEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoProp> | prisma.BoProp
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateBoProp

type AggregateBoPropObject =
  | AggregateBoPropFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateBoPropFields =
  | 'count'



  

export interface AggregateBoPropFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Page

type PageObject =
  | PageFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'project', args?: [] | false, alias?: string  } 
  | { name: 'system', args?: [] | false, alias?: string  } 
  | { name: 'domain', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'wikiUrl', args?: [] | false, alias?: string  } 
  | { name: 'bos', args?: PageBosArgs[] | false, alias?: string  } 
  | { name: 'enums', args?: PageEnumsArgs[] | false, alias?: string  } 

type PageFields =
  | 'id'
  | 'name'
  | 'desc'
  | 'project'
  | 'system'
  | 'domain'
  | 'type'
  | 'wikiUrl'
  | 'bos'
  | 'enums'


type PageBosArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PageEnumsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PageFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  project: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  system: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  domain: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  wikiUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  bos: {
    type: 'Bo'
    args: Record<PageBosArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Page">,
      args: { where?: BoWhereInput | null, orderBy?: prisma.BoOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bo[]> | prisma.Bo[]
  }
  enums: {
    type: 'EnumType'
    args: Record<PageEnumsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Page">,
      args: { where?: EnumTypeWhereInput | null, orderBy?: prisma.EnumTypeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumType[]> | prisma.EnumType[]
  }
}
  

// Types for PageConnection

type PageConnectionObject =
  | PageConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PageConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PageConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PageEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageEdge[]> | prisma.PageEdge[]
  }
  aggregate: {
    type: 'AggregatePage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePage> | prisma.AggregatePage
  }
}
  

// Types for PageEdge

type PageEdgeObject =
  | PageEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PageEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PageEdgeFieldDetails {
  node: {
    type: 'Page'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PageEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Page> | prisma.Page
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePage

type AggregatePageObject =
  | AggregatePageFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePageFields =
  | 'count'



  

export interface AggregatePageFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createEnumType', args?: MutationCreateEnumTypeArgs[] | false, alias?: string  } 
  | { name: 'updateEnumType', args?: MutationUpdateEnumTypeArgs[] | false, alias?: string  } 
  | { name: 'updateManyEnumTypes', args?: MutationUpdateManyEnumTypesArgs[] | false, alias?: string  } 
  | { name: 'upsertEnumType', args?: MutationUpsertEnumTypeArgs[] | false, alias?: string  } 
  | { name: 'deleteEnumType', args?: MutationDeleteEnumTypeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEnumTypes', args?: MutationDeleteManyEnumTypesArgs[] | false, alias?: string  } 
  | { name: 'createEnumProp', args?: MutationCreateEnumPropArgs[] | false, alias?: string  } 
  | { name: 'updateEnumProp', args?: MutationUpdateEnumPropArgs[] | false, alias?: string  } 
  | { name: 'updateManyEnumProps', args?: MutationUpdateManyEnumPropsArgs[] | false, alias?: string  } 
  | { name: 'upsertEnumProp', args?: MutationUpsertEnumPropArgs[] | false, alias?: string  } 
  | { name: 'deleteEnumProp', args?: MutationDeleteEnumPropArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEnumProps', args?: MutationDeleteManyEnumPropsArgs[] | false, alias?: string  } 
  | { name: 'createBo', args?: MutationCreateBoArgs[] | false, alias?: string  } 
  | { name: 'updateBo', args?: MutationUpdateBoArgs[] | false, alias?: string  } 
  | { name: 'updateManyBoes', args?: MutationUpdateManyBoesArgs[] | false, alias?: string  } 
  | { name: 'upsertBo', args?: MutationUpsertBoArgs[] | false, alias?: string  } 
  | { name: 'deleteBo', args?: MutationDeleteBoArgs[] | false, alias?: string  } 
  | { name: 'deleteManyBoes', args?: MutationDeleteManyBoesArgs[] | false, alias?: string  } 
  | { name: 'createBoProp', args?: MutationCreateBoPropArgs[] | false, alias?: string  } 
  | { name: 'updateBoProp', args?: MutationUpdateBoPropArgs[] | false, alias?: string  } 
  | { name: 'updateManyBoProps', args?: MutationUpdateManyBoPropsArgs[] | false, alias?: string  } 
  | { name: 'upsertBoProp', args?: MutationUpsertBoPropArgs[] | false, alias?: string  } 
  | { name: 'deleteBoProp', args?: MutationDeleteBoPropArgs[] | false, alias?: string  } 
  | { name: 'deleteManyBoProps', args?: MutationDeleteManyBoPropsArgs[] | false, alias?: string  } 
  | { name: 'createPage', args?: MutationCreatePageArgs[] | false, alias?: string  } 
  | { name: 'updatePage', args?: MutationUpdatePageArgs[] | false, alias?: string  } 
  | { name: 'updateManyPages', args?: MutationUpdateManyPagesArgs[] | false, alias?: string  } 
  | { name: 'upsertPage', args?: MutationUpsertPageArgs[] | false, alias?: string  } 
  | { name: 'deletePage', args?: MutationDeletePageArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPages', args?: MutationDeleteManyPagesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createEnumType'
  | 'updateEnumType'
  | 'updateManyEnumTypes'
  | 'upsertEnumType'
  | 'deleteEnumType'
  | 'deleteManyEnumTypes'
  | 'createEnumProp'
  | 'updateEnumProp'
  | 'updateManyEnumProps'
  | 'upsertEnumProp'
  | 'deleteEnumProp'
  | 'deleteManyEnumProps'
  | 'createBo'
  | 'updateBo'
  | 'updateManyBoes'
  | 'upsertBo'
  | 'deleteBo'
  | 'deleteManyBoes'
  | 'createBoProp'
  | 'updateBoProp'
  | 'updateManyBoProps'
  | 'upsertBoProp'
  | 'deleteBoProp'
  | 'deleteManyBoProps'
  | 'createPage'
  | 'updatePage'
  | 'updateManyPages'
  | 'upsertPage'
  | 'deletePage'
  | 'deleteManyPages'


type MutationCreateEnumTypeArgs =
  | 'data'
type MutationUpdateEnumTypeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEnumTypesArgs =
  | 'data'
  | 'where'
type MutationUpsertEnumTypeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEnumTypeArgs =
  | 'where'
type MutationDeleteManyEnumTypesArgs =
  | 'where'
type MutationCreateEnumPropArgs =
  | 'data'
type MutationUpdateEnumPropArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEnumPropsArgs =
  | 'data'
  | 'where'
type MutationUpsertEnumPropArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEnumPropArgs =
  | 'where'
type MutationDeleteManyEnumPropsArgs =
  | 'where'
type MutationCreateBoArgs =
  | 'data'
type MutationUpdateBoArgs =
  | 'data'
  | 'where'
type MutationUpdateManyBoesArgs =
  | 'data'
  | 'where'
type MutationUpsertBoArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteBoArgs =
  | 'where'
type MutationDeleteManyBoesArgs =
  | 'where'
type MutationCreateBoPropArgs =
  | 'data'
type MutationUpdateBoPropArgs =
  | 'data'
  | 'where'
type MutationUpdateManyBoPropsArgs =
  | 'data'
  | 'where'
type MutationUpsertBoPropArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteBoPropArgs =
  | 'where'
type MutationDeleteManyBoPropsArgs =
  | 'where'
type MutationCreatePageArgs =
  | 'data'
type MutationUpdatePageArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPagesArgs =
  | 'data'
  | 'where'
type MutationUpsertPageArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePageArgs =
  | 'where'
type MutationDeleteManyPagesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createEnumType: {
    type: 'EnumType'
    args: Record<MutationCreateEnumTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EnumTypeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumType> | prisma.EnumType
  }
  updateEnumType: {
    type: 'EnumType'
    args: Record<MutationUpdateEnumTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EnumTypeUpdateInput, where: EnumTypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumType | null> | prisma.EnumType | null
  }
  updateManyEnumTypes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEnumTypesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EnumTypeUpdateManyMutationInput, where?: EnumTypeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEnumType: {
    type: 'EnumType'
    args: Record<MutationUpsertEnumTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EnumTypeWhereUniqueInput, create: EnumTypeCreateInput, update: EnumTypeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumType> | prisma.EnumType
  }
  deleteEnumType: {
    type: 'EnumType'
    args: Record<MutationDeleteEnumTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EnumTypeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumType | null> | prisma.EnumType | null
  }
  deleteManyEnumTypes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEnumTypesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EnumTypeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEnumProp: {
    type: 'EnumProp'
    args: Record<MutationCreateEnumPropArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EnumPropCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumProp> | prisma.EnumProp
  }
  updateEnumProp: {
    type: 'EnumProp'
    args: Record<MutationUpdateEnumPropArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EnumPropUpdateInput, where: EnumPropWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumProp | null> | prisma.EnumProp | null
  }
  updateManyEnumProps: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEnumPropsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EnumPropUpdateManyMutationInput, where?: EnumPropWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEnumProp: {
    type: 'EnumProp'
    args: Record<MutationUpsertEnumPropArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EnumPropWhereUniqueInput, create: EnumPropCreateInput, update: EnumPropUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumProp> | prisma.EnumProp
  }
  deleteEnumProp: {
    type: 'EnumProp'
    args: Record<MutationDeleteEnumPropArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EnumPropWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumProp | null> | prisma.EnumProp | null
  }
  deleteManyEnumProps: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEnumPropsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EnumPropWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createBo: {
    type: 'Bo'
    args: Record<MutationCreateBoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BoCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bo> | prisma.Bo
  }
  updateBo: {
    type: 'Bo'
    args: Record<MutationUpdateBoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BoUpdateInput, where: BoWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bo | null> | prisma.Bo | null
  }
  updateManyBoes: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyBoesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BoUpdateManyMutationInput, where?: BoWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertBo: {
    type: 'Bo'
    args: Record<MutationUpsertBoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BoWhereUniqueInput, create: BoCreateInput, update: BoUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bo> | prisma.Bo
  }
  deleteBo: {
    type: 'Bo'
    args: Record<MutationDeleteBoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BoWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bo | null> | prisma.Bo | null
  }
  deleteManyBoes: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyBoesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: BoWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createBoProp: {
    type: 'BoProp'
    args: Record<MutationCreateBoPropArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BoPropCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoProp> | prisma.BoProp
  }
  updateBoProp: {
    type: 'BoProp'
    args: Record<MutationUpdateBoPropArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BoPropUpdateInput, where: BoPropWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoProp | null> | prisma.BoProp | null
  }
  updateManyBoProps: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyBoPropsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: BoPropUpdateManyMutationInput, where?: BoPropWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertBoProp: {
    type: 'BoProp'
    args: Record<MutationUpsertBoPropArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BoPropWhereUniqueInput, create: BoPropCreateInput, update: BoPropUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoProp> | prisma.BoProp
  }
  deleteBoProp: {
    type: 'BoProp'
    args: Record<MutationDeleteBoPropArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: BoPropWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoProp | null> | prisma.BoProp | null
  }
  deleteManyBoProps: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyBoPropsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: BoPropWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPage: {
    type: 'Page'
    args: Record<MutationCreatePageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PageCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Page> | prisma.Page
  }
  updatePage: {
    type: 'Page'
    args: Record<MutationUpdatePageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PageUpdateInput, where: PageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Page | null> | prisma.Page | null
  }
  updateManyPages: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PageUpdateManyMutationInput, where?: PageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPage: {
    type: 'Page'
    args: Record<MutationUpsertPageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PageWhereUniqueInput, create: PageCreateInput, update: PageUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Page> | prisma.Page
  }
  deletePage: {
    type: 'Page'
    args: Record<MutationDeletePageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Page | null> | prisma.Page | null
  }
  deleteManyPages: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'enumType', args?: SubscriptionEnumTypeArgs[] | false, alias?: string  } 
  | { name: 'enumProp', args?: SubscriptionEnumPropArgs[] | false, alias?: string  } 
  | { name: 'bo', args?: SubscriptionBoArgs[] | false, alias?: string  } 
  | { name: 'boProp', args?: SubscriptionBoPropArgs[] | false, alias?: string  } 
  | { name: 'page', args?: SubscriptionPageArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'enumType'
  | 'enumProp'
  | 'bo'
  | 'boProp'
  | 'page'


type SubscriptionEnumTypeArgs =
  | 'where'
type SubscriptionEnumPropArgs =
  | 'where'
type SubscriptionBoArgs =
  | 'where'
type SubscriptionBoPropArgs =
  | 'where'
type SubscriptionPageArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  enumType: {
    type: 'EnumTypeSubscriptionPayload'
    args: Record<SubscriptionEnumTypeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EnumTypeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumTypeSubscriptionPayload | null> | prisma.EnumTypeSubscriptionPayload | null
  }
  enumProp: {
    type: 'EnumPropSubscriptionPayload'
    args: Record<SubscriptionEnumPropArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EnumPropSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumPropSubscriptionPayload | null> | prisma.EnumPropSubscriptionPayload | null
  }
  bo: {
    type: 'BoSubscriptionPayload'
    args: Record<SubscriptionBoArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: BoSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoSubscriptionPayload | null> | prisma.BoSubscriptionPayload | null
  }
  boProp: {
    type: 'BoPropSubscriptionPayload'
    args: Record<SubscriptionBoPropArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: BoPropSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoPropSubscriptionPayload | null> | prisma.BoPropSubscriptionPayload | null
  }
  page: {
    type: 'PageSubscriptionPayload'
    args: Record<SubscriptionPageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PageSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageSubscriptionPayload | null> | prisma.PageSubscriptionPayload | null
  }
}
  

// Types for EnumTypeSubscriptionPayload

type EnumTypeSubscriptionPayloadObject =
  | EnumTypeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EnumTypeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EnumTypeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EnumTypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'EnumType'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EnumTypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumType | null> | prisma.EnumType | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EnumTypePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EnumTypeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumTypePreviousValues | null> | prisma.EnumTypePreviousValues | null
  }
}
  

// Types for EnumTypePreviousValues

type EnumTypePreviousValuesObject =
  | EnumTypePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'wikiUrl', args?: [] | false, alias?: string  } 

type EnumTypePreviousValuesFields =
  | 'id'
  | 'name'
  | 'desc'
  | 'wikiUrl'



  

export interface EnumTypePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  wikiUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EnumPropSubscriptionPayload

type EnumPropSubscriptionPayloadObject =
  | EnumPropSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EnumPropSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EnumPropSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EnumPropSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'EnumProp'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EnumPropSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumProp | null> | prisma.EnumProp | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EnumPropPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EnumPropSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EnumPropPreviousValues | null> | prisma.EnumPropPreviousValues | null
  }
}
  

// Types for EnumPropPreviousValues

type EnumPropPreviousValuesObject =
  | EnumPropPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'key', args?: [] | false, alias?: string  } 
  | { name: 'value', args?: [] | false, alias?: string  } 

type EnumPropPreviousValuesFields =
  | 'id'
  | 'key'
  | 'value'



  

export interface EnumPropPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  key: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  value: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for BoSubscriptionPayload

type BoSubscriptionPayloadObject =
  | BoSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type BoSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface BoSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BoSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Bo'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BoSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Bo | null> | prisma.Bo | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'BoPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BoSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoPreviousValues | null> | prisma.BoPreviousValues | null
  }
}
  

// Types for BoPreviousValues

type BoPreviousValuesObject =
  | BoPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'wikiUrl', args?: [] | false, alias?: string  } 

type BoPreviousValuesFields =
  | 'id'
  | 'name'
  | 'desc'
  | 'wikiUrl'



  

export interface BoPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  wikiUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for BoPropSubscriptionPayload

type BoPropSubscriptionPayloadObject =
  | BoPropSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type BoPropSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface BoPropSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"BoPropSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'BoProp'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BoPropSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoProp | null> | prisma.BoProp | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'BoPropPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"BoPropSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BoPropPreviousValues | null> | prisma.BoPropPreviousValues | null
  }
}
  

// Types for BoPropPreviousValues

type BoPropPreviousValuesObject =
  | BoPropPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'required', args?: [] | false, alias?: string  } 
  | { name: 'unique', args?: [] | false, alias?: string  } 
  | { name: 'redundant', args?: [] | false, alias?: string  } 

type BoPropPreviousValuesFields =
  | 'id'
  | 'name'
  | 'desc'
  | 'type'
  | 'required'
  | 'unique'
  | 'redundant'



  

export interface BoPropPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  required: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  unique: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  redundant: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PageSubscriptionPayload

type PageSubscriptionPayloadObject =
  | PageSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PageSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PageSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Page'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Page | null> | prisma.Page | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PagePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PagePreviousValues | null> | prisma.PagePreviousValues | null
  }
}
  

// Types for PagePreviousValues

type PagePreviousValuesObject =
  | PagePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'desc', args?: [] | false, alias?: string  } 
  | { name: 'project', args?: [] | false, alias?: string  } 
  | { name: 'system', args?: [] | false, alias?: string  } 
  | { name: 'domain', args?: [] | false, alias?: string  } 
  | { name: 'type', args?: [] | false, alias?: string  } 
  | { name: 'wikiUrl', args?: [] | false, alias?: string  } 

type PagePreviousValuesFields =
  | 'id'
  | 'name'
  | 'desc'
  | 'project'
  | 'system'
  | 'domain'
  | 'type'
  | 'wikiUrl'



  

export interface PagePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  desc: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  project: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  system: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  domain: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  type: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  wikiUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface EnumTypeWhereUniqueInput {
  id?: string | null
}
export type EnumTypeWhereUniqueInputInputObject =
  | Extract<keyof EnumTypeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EnumPropWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  key?: string | null
  key_not?: string | null
  key_in?: string[]
  key_not_in?: string[]
  key_lt?: string | null
  key_lte?: string | null
  key_gt?: string | null
  key_gte?: string | null
  key_contains?: string | null
  key_not_contains?: string | null
  key_starts_with?: string | null
  key_not_starts_with?: string | null
  key_ends_with?: string | null
  key_not_ends_with?: string | null
  value?: number | null
  value_not?: number | null
  value_in?: number[]
  value_not_in?: number[]
  value_lt?: number | null
  value_lte?: number | null
  value_gt?: number | null
  value_gte?: number | null
  AND?: EnumPropWhereInput[]
  OR?: EnumPropWhereInput[]
  NOT?: EnumPropWhereInput[]
}
export type EnumPropWhereInputInputObject =
  | Extract<keyof EnumPropWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'key', alias?: string  } 
  | { name: 'key_not', alias?: string  } 
  | { name: 'key_in', alias?: string  } 
  | { name: 'key_not_in', alias?: string  } 
  | { name: 'key_lt', alias?: string  } 
  | { name: 'key_lte', alias?: string  } 
  | { name: 'key_gt', alias?: string  } 
  | { name: 'key_gte', alias?: string  } 
  | { name: 'key_contains', alias?: string  } 
  | { name: 'key_not_contains', alias?: string  } 
  | { name: 'key_starts_with', alias?: string  } 
  | { name: 'key_not_starts_with', alias?: string  } 
  | { name: 'key_ends_with', alias?: string  } 
  | { name: 'key_not_ends_with', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'value_not', alias?: string  } 
  | { name: 'value_in', alias?: string  } 
  | { name: 'value_not_in', alias?: string  } 
  | { name: 'value_lt', alias?: string  } 
  | { name: 'value_lte', alias?: string  } 
  | { name: 'value_gt', alias?: string  } 
  | { name: 'value_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EnumTypeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  props_every?: EnumPropWhereInput | null
  props_some?: EnumPropWhereInput | null
  props_none?: EnumPropWhereInput | null
  wikiUrl?: string | null
  wikiUrl_not?: string | null
  wikiUrl_in?: string[]
  wikiUrl_not_in?: string[]
  wikiUrl_lt?: string | null
  wikiUrl_lte?: string | null
  wikiUrl_gt?: string | null
  wikiUrl_gte?: string | null
  wikiUrl_contains?: string | null
  wikiUrl_not_contains?: string | null
  wikiUrl_starts_with?: string | null
  wikiUrl_not_starts_with?: string | null
  wikiUrl_ends_with?: string | null
  wikiUrl_not_ends_with?: string | null
  AND?: EnumTypeWhereInput[]
  OR?: EnumTypeWhereInput[]
  NOT?: EnumTypeWhereInput[]
}
export type EnumTypeWhereInputInputObject =
  | Extract<keyof EnumTypeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'props_every', alias?: string  } 
  | { name: 'props_some', alias?: string  } 
  | { name: 'props_none', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  | { name: 'wikiUrl_not', alias?: string  } 
  | { name: 'wikiUrl_in', alias?: string  } 
  | { name: 'wikiUrl_not_in', alias?: string  } 
  | { name: 'wikiUrl_lt', alias?: string  } 
  | { name: 'wikiUrl_lte', alias?: string  } 
  | { name: 'wikiUrl_gt', alias?: string  } 
  | { name: 'wikiUrl_gte', alias?: string  } 
  | { name: 'wikiUrl_contains', alias?: string  } 
  | { name: 'wikiUrl_not_contains', alias?: string  } 
  | { name: 'wikiUrl_starts_with', alias?: string  } 
  | { name: 'wikiUrl_not_starts_with', alias?: string  } 
  | { name: 'wikiUrl_ends_with', alias?: string  } 
  | { name: 'wikiUrl_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EnumPropWhereUniqueInput {
  id?: string | null
}
export type EnumPropWhereUniqueInputInputObject =
  | Extract<keyof EnumPropWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface BoWhereUniqueInput {
  id?: string | null
}
export type BoWhereUniqueInputInputObject =
  | Extract<keyof BoWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface BoPropWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  type?: string | null
  type_not?: string | null
  type_in?: string[]
  type_not_in?: string[]
  type_lt?: string | null
  type_lte?: string | null
  type_gt?: string | null
  type_gte?: string | null
  type_contains?: string | null
  type_not_contains?: string | null
  type_starts_with?: string | null
  type_not_starts_with?: string | null
  type_ends_with?: string | null
  type_not_ends_with?: string | null
  required?: boolean | null
  required_not?: boolean | null
  unique?: boolean | null
  unique_not?: boolean | null
  redundant?: boolean | null
  redundant_not?: boolean | null
  linkBo?: BoWhereInput | null
  linkEnumType?: EnumTypeWhereInput | null
  AND?: BoPropWhereInput[]
  OR?: BoPropWhereInput[]
  NOT?: BoPropWhereInput[]
}
export type BoPropWhereInputInputObject =
  | Extract<keyof BoPropWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'type_contains', alias?: string  } 
  | { name: 'type_not_contains', alias?: string  } 
  | { name: 'type_starts_with', alias?: string  } 
  | { name: 'type_not_starts_with', alias?: string  } 
  | { name: 'type_ends_with', alias?: string  } 
  | { name: 'type_not_ends_with', alias?: string  } 
  | { name: 'required', alias?: string  } 
  | { name: 'required_not', alias?: string  } 
  | { name: 'unique', alias?: string  } 
  | { name: 'unique_not', alias?: string  } 
  | { name: 'redundant', alias?: string  } 
  | { name: 'redundant_not', alias?: string  } 
  | { name: 'linkBo', alias?: string  } 
  | { name: 'linkEnumType', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BoWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  props_every?: BoPropWhereInput | null
  props_some?: BoPropWhereInput | null
  props_none?: BoPropWhereInput | null
  wikiUrl?: string | null
  wikiUrl_not?: string | null
  wikiUrl_in?: string[]
  wikiUrl_not_in?: string[]
  wikiUrl_lt?: string | null
  wikiUrl_lte?: string | null
  wikiUrl_gt?: string | null
  wikiUrl_gte?: string | null
  wikiUrl_contains?: string | null
  wikiUrl_not_contains?: string | null
  wikiUrl_starts_with?: string | null
  wikiUrl_not_starts_with?: string | null
  wikiUrl_ends_with?: string | null
  wikiUrl_not_ends_with?: string | null
  details_every?: BoWhereInput | null
  details_some?: BoWhereInput | null
  details_none?: BoWhereInput | null
  AND?: BoWhereInput[]
  OR?: BoWhereInput[]
  NOT?: BoWhereInput[]
}
export type BoWhereInputInputObject =
  | Extract<keyof BoWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'props_every', alias?: string  } 
  | { name: 'props_some', alias?: string  } 
  | { name: 'props_none', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  | { name: 'wikiUrl_not', alias?: string  } 
  | { name: 'wikiUrl_in', alias?: string  } 
  | { name: 'wikiUrl_not_in', alias?: string  } 
  | { name: 'wikiUrl_lt', alias?: string  } 
  | { name: 'wikiUrl_lte', alias?: string  } 
  | { name: 'wikiUrl_gt', alias?: string  } 
  | { name: 'wikiUrl_gte', alias?: string  } 
  | { name: 'wikiUrl_contains', alias?: string  } 
  | { name: 'wikiUrl_not_contains', alias?: string  } 
  | { name: 'wikiUrl_starts_with', alias?: string  } 
  | { name: 'wikiUrl_not_starts_with', alias?: string  } 
  | { name: 'wikiUrl_ends_with', alias?: string  } 
  | { name: 'wikiUrl_not_ends_with', alias?: string  } 
  | { name: 'details_every', alias?: string  } 
  | { name: 'details_some', alias?: string  } 
  | { name: 'details_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BoPropWhereUniqueInput {
  id?: string | null
}
export type BoPropWhereUniqueInputInputObject =
  | Extract<keyof BoPropWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PageWhereUniqueInput {
  id?: string | null
}
export type PageWhereUniqueInputInputObject =
  | Extract<keyof PageWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PageWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  project?: string | null
  project_not?: string | null
  project_in?: string[]
  project_not_in?: string[]
  project_lt?: string | null
  project_lte?: string | null
  project_gt?: string | null
  project_gte?: string | null
  project_contains?: string | null
  project_not_contains?: string | null
  project_starts_with?: string | null
  project_not_starts_with?: string | null
  project_ends_with?: string | null
  project_not_ends_with?: string | null
  system?: string | null
  system_not?: string | null
  system_in?: string[]
  system_not_in?: string[]
  system_lt?: string | null
  system_lte?: string | null
  system_gt?: string | null
  system_gte?: string | null
  system_contains?: string | null
  system_not_contains?: string | null
  system_starts_with?: string | null
  system_not_starts_with?: string | null
  system_ends_with?: string | null
  system_not_ends_with?: string | null
  domain?: string | null
  domain_not?: string | null
  domain_in?: string[]
  domain_not_in?: string[]
  domain_lt?: string | null
  domain_lte?: string | null
  domain_gt?: string | null
  domain_gte?: string | null
  domain_contains?: string | null
  domain_not_contains?: string | null
  domain_starts_with?: string | null
  domain_not_starts_with?: string | null
  domain_ends_with?: string | null
  domain_not_ends_with?: string | null
  type?: string | null
  type_not?: string | null
  type_in?: string[]
  type_not_in?: string[]
  type_lt?: string | null
  type_lte?: string | null
  type_gt?: string | null
  type_gte?: string | null
  type_contains?: string | null
  type_not_contains?: string | null
  type_starts_with?: string | null
  type_not_starts_with?: string | null
  type_ends_with?: string | null
  type_not_ends_with?: string | null
  wikiUrl?: string | null
  wikiUrl_not?: string | null
  wikiUrl_in?: string[]
  wikiUrl_not_in?: string[]
  wikiUrl_lt?: string | null
  wikiUrl_lte?: string | null
  wikiUrl_gt?: string | null
  wikiUrl_gte?: string | null
  wikiUrl_contains?: string | null
  wikiUrl_not_contains?: string | null
  wikiUrl_starts_with?: string | null
  wikiUrl_not_starts_with?: string | null
  wikiUrl_ends_with?: string | null
  wikiUrl_not_ends_with?: string | null
  bos_every?: BoWhereInput | null
  bos_some?: BoWhereInput | null
  bos_none?: BoWhereInput | null
  enums_every?: EnumTypeWhereInput | null
  enums_some?: EnumTypeWhereInput | null
  enums_none?: EnumTypeWhereInput | null
  AND?: PageWhereInput[]
  OR?: PageWhereInput[]
  NOT?: PageWhereInput[]
}
export type PageWhereInputInputObject =
  | Extract<keyof PageWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'project_not', alias?: string  } 
  | { name: 'project_in', alias?: string  } 
  | { name: 'project_not_in', alias?: string  } 
  | { name: 'project_lt', alias?: string  } 
  | { name: 'project_lte', alias?: string  } 
  | { name: 'project_gt', alias?: string  } 
  | { name: 'project_gte', alias?: string  } 
  | { name: 'project_contains', alias?: string  } 
  | { name: 'project_not_contains', alias?: string  } 
  | { name: 'project_starts_with', alias?: string  } 
  | { name: 'project_not_starts_with', alias?: string  } 
  | { name: 'project_ends_with', alias?: string  } 
  | { name: 'project_not_ends_with', alias?: string  } 
  | { name: 'system', alias?: string  } 
  | { name: 'system_not', alias?: string  } 
  | { name: 'system_in', alias?: string  } 
  | { name: 'system_not_in', alias?: string  } 
  | { name: 'system_lt', alias?: string  } 
  | { name: 'system_lte', alias?: string  } 
  | { name: 'system_gt', alias?: string  } 
  | { name: 'system_gte', alias?: string  } 
  | { name: 'system_contains', alias?: string  } 
  | { name: 'system_not_contains', alias?: string  } 
  | { name: 'system_starts_with', alias?: string  } 
  | { name: 'system_not_starts_with', alias?: string  } 
  | { name: 'system_ends_with', alias?: string  } 
  | { name: 'system_not_ends_with', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'domain_not', alias?: string  } 
  | { name: 'domain_in', alias?: string  } 
  | { name: 'domain_not_in', alias?: string  } 
  | { name: 'domain_lt', alias?: string  } 
  | { name: 'domain_lte', alias?: string  } 
  | { name: 'domain_gt', alias?: string  } 
  | { name: 'domain_gte', alias?: string  } 
  | { name: 'domain_contains', alias?: string  } 
  | { name: 'domain_not_contains', alias?: string  } 
  | { name: 'domain_starts_with', alias?: string  } 
  | { name: 'domain_not_starts_with', alias?: string  } 
  | { name: 'domain_ends_with', alias?: string  } 
  | { name: 'domain_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'type_contains', alias?: string  } 
  | { name: 'type_not_contains', alias?: string  } 
  | { name: 'type_starts_with', alias?: string  } 
  | { name: 'type_not_starts_with', alias?: string  } 
  | { name: 'type_ends_with', alias?: string  } 
  | { name: 'type_not_ends_with', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  | { name: 'wikiUrl_not', alias?: string  } 
  | { name: 'wikiUrl_in', alias?: string  } 
  | { name: 'wikiUrl_not_in', alias?: string  } 
  | { name: 'wikiUrl_lt', alias?: string  } 
  | { name: 'wikiUrl_lte', alias?: string  } 
  | { name: 'wikiUrl_gt', alias?: string  } 
  | { name: 'wikiUrl_gte', alias?: string  } 
  | { name: 'wikiUrl_contains', alias?: string  } 
  | { name: 'wikiUrl_not_contains', alias?: string  } 
  | { name: 'wikiUrl_starts_with', alias?: string  } 
  | { name: 'wikiUrl_not_starts_with', alias?: string  } 
  | { name: 'wikiUrl_ends_with', alias?: string  } 
  | { name: 'wikiUrl_not_ends_with', alias?: string  } 
  | { name: 'bos_every', alias?: string  } 
  | { name: 'bos_some', alias?: string  } 
  | { name: 'bos_none', alias?: string  } 
  | { name: 'enums_every', alias?: string  } 
  | { name: 'enums_some', alias?: string  } 
  | { name: 'enums_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EnumTypeCreateInput {
  name?: string | null
  desc?: string | null
  props?: EnumPropCreateManyInput | null
  wikiUrl?: string | null
}
export type EnumTypeCreateInputInputObject =
  | Extract<keyof EnumTypeCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'props', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  
export interface EnumPropCreateManyInput {
  create?: EnumPropCreateInput[]
  connect?: EnumPropWhereUniqueInput[]
}
export type EnumPropCreateManyInputInputObject =
  | Extract<keyof EnumPropCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EnumPropCreateInput {
  key?: string
  value?: number
}
export type EnumPropCreateInputInputObject =
  | Extract<keyof EnumPropCreateInput, string>
  | { name: 'key', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface EnumTypeUpdateInput {
  name?: string | null
  desc?: string | null
  props?: EnumPropUpdateManyInput | null
  wikiUrl?: string | null
}
export type EnumTypeUpdateInputInputObject =
  | Extract<keyof EnumTypeUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'props', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  
export interface EnumPropUpdateManyInput {
  create?: EnumPropCreateInput[]
  update?: EnumPropUpdateWithWhereUniqueNestedInput[]
  upsert?: EnumPropUpsertWithWhereUniqueNestedInput[]
  delete?: EnumPropWhereUniqueInput[]
  connect?: EnumPropWhereUniqueInput[]
  set?: EnumPropWhereUniqueInput[]
  disconnect?: EnumPropWhereUniqueInput[]
  deleteMany?: EnumPropScalarWhereInput[]
  updateMany?: EnumPropUpdateManyWithWhereNestedInput[]
}
export type EnumPropUpdateManyInputInputObject =
  | Extract<keyof EnumPropUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EnumPropUpdateWithWhereUniqueNestedInput {
  where?: EnumPropWhereUniqueInput
  data?: EnumPropUpdateDataInput
}
export type EnumPropUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof EnumPropUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EnumPropUpdateDataInput {
  key?: string | null
  value?: number | null
}
export type EnumPropUpdateDataInputInputObject =
  | Extract<keyof EnumPropUpdateDataInput, string>
  | { name: 'key', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface EnumPropUpsertWithWhereUniqueNestedInput {
  where?: EnumPropWhereUniqueInput
  update?: EnumPropUpdateDataInput
  create?: EnumPropCreateInput
}
export type EnumPropUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof EnumPropUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EnumPropScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  key?: string | null
  key_not?: string | null
  key_in?: string[]
  key_not_in?: string[]
  key_lt?: string | null
  key_lte?: string | null
  key_gt?: string | null
  key_gte?: string | null
  key_contains?: string | null
  key_not_contains?: string | null
  key_starts_with?: string | null
  key_not_starts_with?: string | null
  key_ends_with?: string | null
  key_not_ends_with?: string | null
  value?: number | null
  value_not?: number | null
  value_in?: number[]
  value_not_in?: number[]
  value_lt?: number | null
  value_lte?: number | null
  value_gt?: number | null
  value_gte?: number | null
  AND?: EnumPropScalarWhereInput[]
  OR?: EnumPropScalarWhereInput[]
  NOT?: EnumPropScalarWhereInput[]
}
export type EnumPropScalarWhereInputInputObject =
  | Extract<keyof EnumPropScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'key', alias?: string  } 
  | { name: 'key_not', alias?: string  } 
  | { name: 'key_in', alias?: string  } 
  | { name: 'key_not_in', alias?: string  } 
  | { name: 'key_lt', alias?: string  } 
  | { name: 'key_lte', alias?: string  } 
  | { name: 'key_gt', alias?: string  } 
  | { name: 'key_gte', alias?: string  } 
  | { name: 'key_contains', alias?: string  } 
  | { name: 'key_not_contains', alias?: string  } 
  | { name: 'key_starts_with', alias?: string  } 
  | { name: 'key_not_starts_with', alias?: string  } 
  | { name: 'key_ends_with', alias?: string  } 
  | { name: 'key_not_ends_with', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'value_not', alias?: string  } 
  | { name: 'value_in', alias?: string  } 
  | { name: 'value_not_in', alias?: string  } 
  | { name: 'value_lt', alias?: string  } 
  | { name: 'value_lte', alias?: string  } 
  | { name: 'value_gt', alias?: string  } 
  | { name: 'value_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EnumPropUpdateManyWithWhereNestedInput {
  where?: EnumPropScalarWhereInput
  data?: EnumPropUpdateManyDataInput
}
export type EnumPropUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EnumPropUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EnumPropUpdateManyDataInput {
  key?: string | null
  value?: number | null
}
export type EnumPropUpdateManyDataInputInputObject =
  | Extract<keyof EnumPropUpdateManyDataInput, string>
  | { name: 'key', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface EnumTypeUpdateManyMutationInput {
  name?: string | null
  desc?: string | null
  wikiUrl?: string | null
}
export type EnumTypeUpdateManyMutationInputInputObject =
  | Extract<keyof EnumTypeUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  
export interface EnumPropUpdateInput {
  key?: string | null
  value?: number | null
}
export type EnumPropUpdateInputInputObject =
  | Extract<keyof EnumPropUpdateInput, string>
  | { name: 'key', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface EnumPropUpdateManyMutationInput {
  key?: string | null
  value?: number | null
}
export type EnumPropUpdateManyMutationInputInputObject =
  | Extract<keyof EnumPropUpdateManyMutationInput, string>
  | { name: 'key', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface BoCreateInput {
  name?: string | null
  desc?: string | null
  props?: BoPropCreateManyWithoutLinkBoInput | null
  wikiUrl?: string | null
  details?: BoCreateManyInput | null
}
export type BoCreateInputInputObject =
  | Extract<keyof BoCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'props', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  | { name: 'details', alias?: string  } 
  
export interface BoPropCreateManyWithoutLinkBoInput {
  create?: BoPropCreateWithoutLinkBoInput[]
  connect?: BoPropWhereUniqueInput[]
}
export type BoPropCreateManyWithoutLinkBoInputInputObject =
  | Extract<keyof BoPropCreateManyWithoutLinkBoInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BoPropCreateWithoutLinkBoInput {
  name?: string | null
  desc?: string | null
  type?: string | null
  required?: boolean | null
  unique?: boolean | null
  redundant?: boolean | null
  linkEnumType?: EnumTypeCreateOneInput | null
}
export type BoPropCreateWithoutLinkBoInputInputObject =
  | Extract<keyof BoPropCreateWithoutLinkBoInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'required', alias?: string  } 
  | { name: 'unique', alias?: string  } 
  | { name: 'redundant', alias?: string  } 
  | { name: 'linkEnumType', alias?: string  } 
  
export interface EnumTypeCreateOneInput {
  create?: EnumTypeCreateInput | null
  connect?: EnumTypeWhereUniqueInput | null
}
export type EnumTypeCreateOneInputInputObject =
  | Extract<keyof EnumTypeCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BoCreateManyInput {
  create?: BoCreateInput[]
  connect?: BoWhereUniqueInput[]
}
export type BoCreateManyInputInputObject =
  | Extract<keyof BoCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BoUpdateInput {
  name?: string | null
  desc?: string | null
  props?: BoPropUpdateManyWithoutLinkBoInput | null
  wikiUrl?: string | null
  details?: BoUpdateManyInput | null
}
export type BoUpdateInputInputObject =
  | Extract<keyof BoUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'props', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  | { name: 'details', alias?: string  } 
  
export interface BoPropUpdateManyWithoutLinkBoInput {
  create?: BoPropCreateWithoutLinkBoInput[]
  delete?: BoPropWhereUniqueInput[]
  connect?: BoPropWhereUniqueInput[]
  set?: BoPropWhereUniqueInput[]
  disconnect?: BoPropWhereUniqueInput[]
  update?: BoPropUpdateWithWhereUniqueWithoutLinkBoInput[]
  upsert?: BoPropUpsertWithWhereUniqueWithoutLinkBoInput[]
  deleteMany?: BoPropScalarWhereInput[]
  updateMany?: BoPropUpdateManyWithWhereNestedInput[]
}
export type BoPropUpdateManyWithoutLinkBoInputInputObject =
  | Extract<keyof BoPropUpdateManyWithoutLinkBoInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface BoPropUpdateWithWhereUniqueWithoutLinkBoInput {
  where?: BoPropWhereUniqueInput
  data?: BoPropUpdateWithoutLinkBoDataInput
}
export type BoPropUpdateWithWhereUniqueWithoutLinkBoInputInputObject =
  | Extract<keyof BoPropUpdateWithWhereUniqueWithoutLinkBoInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface BoPropUpdateWithoutLinkBoDataInput {
  name?: string | null
  desc?: string | null
  type?: string | null
  required?: boolean | null
  unique?: boolean | null
  redundant?: boolean | null
  linkEnumType?: EnumTypeUpdateOneInput | null
}
export type BoPropUpdateWithoutLinkBoDataInputInputObject =
  | Extract<keyof BoPropUpdateWithoutLinkBoDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'required', alias?: string  } 
  | { name: 'unique', alias?: string  } 
  | { name: 'redundant', alias?: string  } 
  | { name: 'linkEnumType', alias?: string  } 
  
export interface EnumTypeUpdateOneInput {
  create?: EnumTypeCreateInput | null
  update?: EnumTypeUpdateDataInput | null
  upsert?: EnumTypeUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: EnumTypeWhereUniqueInput | null
}
export type EnumTypeUpdateOneInputInputObject =
  | Extract<keyof EnumTypeUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EnumTypeUpdateDataInput {
  name?: string | null
  desc?: string | null
  props?: EnumPropUpdateManyInput | null
  wikiUrl?: string | null
}
export type EnumTypeUpdateDataInputInputObject =
  | Extract<keyof EnumTypeUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'props', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  
export interface EnumTypeUpsertNestedInput {
  update?: EnumTypeUpdateDataInput
  create?: EnumTypeCreateInput
}
export type EnumTypeUpsertNestedInputInputObject =
  | Extract<keyof EnumTypeUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BoPropUpsertWithWhereUniqueWithoutLinkBoInput {
  where?: BoPropWhereUniqueInput
  update?: BoPropUpdateWithoutLinkBoDataInput
  create?: BoPropCreateWithoutLinkBoInput
}
export type BoPropUpsertWithWhereUniqueWithoutLinkBoInputInputObject =
  | Extract<keyof BoPropUpsertWithWhereUniqueWithoutLinkBoInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BoPropScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  type?: string | null
  type_not?: string | null
  type_in?: string[]
  type_not_in?: string[]
  type_lt?: string | null
  type_lte?: string | null
  type_gt?: string | null
  type_gte?: string | null
  type_contains?: string | null
  type_not_contains?: string | null
  type_starts_with?: string | null
  type_not_starts_with?: string | null
  type_ends_with?: string | null
  type_not_ends_with?: string | null
  required?: boolean | null
  required_not?: boolean | null
  unique?: boolean | null
  unique_not?: boolean | null
  redundant?: boolean | null
  redundant_not?: boolean | null
  AND?: BoPropScalarWhereInput[]
  OR?: BoPropScalarWhereInput[]
  NOT?: BoPropScalarWhereInput[]
}
export type BoPropScalarWhereInputInputObject =
  | Extract<keyof BoPropScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'type_not', alias?: string  } 
  | { name: 'type_in', alias?: string  } 
  | { name: 'type_not_in', alias?: string  } 
  | { name: 'type_lt', alias?: string  } 
  | { name: 'type_lte', alias?: string  } 
  | { name: 'type_gt', alias?: string  } 
  | { name: 'type_gte', alias?: string  } 
  | { name: 'type_contains', alias?: string  } 
  | { name: 'type_not_contains', alias?: string  } 
  | { name: 'type_starts_with', alias?: string  } 
  | { name: 'type_not_starts_with', alias?: string  } 
  | { name: 'type_ends_with', alias?: string  } 
  | { name: 'type_not_ends_with', alias?: string  } 
  | { name: 'required', alias?: string  } 
  | { name: 'required_not', alias?: string  } 
  | { name: 'unique', alias?: string  } 
  | { name: 'unique_not', alias?: string  } 
  | { name: 'redundant', alias?: string  } 
  | { name: 'redundant_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BoPropUpdateManyWithWhereNestedInput {
  where?: BoPropScalarWhereInput
  data?: BoPropUpdateManyDataInput
}
export type BoPropUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof BoPropUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface BoPropUpdateManyDataInput {
  name?: string | null
  desc?: string | null
  type?: string | null
  required?: boolean | null
  unique?: boolean | null
  redundant?: boolean | null
}
export type BoPropUpdateManyDataInputInputObject =
  | Extract<keyof BoPropUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'required', alias?: string  } 
  | { name: 'unique', alias?: string  } 
  | { name: 'redundant', alias?: string  } 
  
export interface BoUpdateManyInput {
  create?: BoCreateInput[]
  update?: BoUpdateWithWhereUniqueNestedInput[]
  upsert?: BoUpsertWithWhereUniqueNestedInput[]
  delete?: BoWhereUniqueInput[]
  connect?: BoWhereUniqueInput[]
  set?: BoWhereUniqueInput[]
  disconnect?: BoWhereUniqueInput[]
  deleteMany?: BoScalarWhereInput[]
  updateMany?: BoUpdateManyWithWhereNestedInput[]
}
export type BoUpdateManyInputInputObject =
  | Extract<keyof BoUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface BoUpdateWithWhereUniqueNestedInput {
  where?: BoWhereUniqueInput
  data?: BoUpdateDataInput
}
export type BoUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof BoUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface BoUpdateDataInput {
  name?: string | null
  desc?: string | null
  props?: BoPropUpdateManyWithoutLinkBoInput | null
  wikiUrl?: string | null
  details?: BoUpdateManyInput | null
}
export type BoUpdateDataInputInputObject =
  | Extract<keyof BoUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'props', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  | { name: 'details', alias?: string  } 
  
export interface BoUpsertWithWhereUniqueNestedInput {
  where?: BoWhereUniqueInput
  update?: BoUpdateDataInput
  create?: BoCreateInput
}
export type BoUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof BoUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BoScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  wikiUrl?: string | null
  wikiUrl_not?: string | null
  wikiUrl_in?: string[]
  wikiUrl_not_in?: string[]
  wikiUrl_lt?: string | null
  wikiUrl_lte?: string | null
  wikiUrl_gt?: string | null
  wikiUrl_gte?: string | null
  wikiUrl_contains?: string | null
  wikiUrl_not_contains?: string | null
  wikiUrl_starts_with?: string | null
  wikiUrl_not_starts_with?: string | null
  wikiUrl_ends_with?: string | null
  wikiUrl_not_ends_with?: string | null
  AND?: BoScalarWhereInput[]
  OR?: BoScalarWhereInput[]
  NOT?: BoScalarWhereInput[]
}
export type BoScalarWhereInputInputObject =
  | Extract<keyof BoScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  | { name: 'wikiUrl_not', alias?: string  } 
  | { name: 'wikiUrl_in', alias?: string  } 
  | { name: 'wikiUrl_not_in', alias?: string  } 
  | { name: 'wikiUrl_lt', alias?: string  } 
  | { name: 'wikiUrl_lte', alias?: string  } 
  | { name: 'wikiUrl_gt', alias?: string  } 
  | { name: 'wikiUrl_gte', alias?: string  } 
  | { name: 'wikiUrl_contains', alias?: string  } 
  | { name: 'wikiUrl_not_contains', alias?: string  } 
  | { name: 'wikiUrl_starts_with', alias?: string  } 
  | { name: 'wikiUrl_not_starts_with', alias?: string  } 
  | { name: 'wikiUrl_ends_with', alias?: string  } 
  | { name: 'wikiUrl_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BoUpdateManyWithWhereNestedInput {
  where?: BoScalarWhereInput
  data?: BoUpdateManyDataInput
}
export type BoUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof BoUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface BoUpdateManyDataInput {
  name?: string | null
  desc?: string | null
  wikiUrl?: string | null
}
export type BoUpdateManyDataInputInputObject =
  | Extract<keyof BoUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  
export interface BoUpdateManyMutationInput {
  name?: string | null
  desc?: string | null
  wikiUrl?: string | null
}
export type BoUpdateManyMutationInputInputObject =
  | Extract<keyof BoUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  
export interface BoPropCreateInput {
  name?: string | null
  desc?: string | null
  type?: string | null
  required?: boolean | null
  unique?: boolean | null
  redundant?: boolean | null
  linkBo?: BoCreateOneWithoutPropsInput | null
  linkEnumType?: EnumTypeCreateOneInput | null
}
export type BoPropCreateInputInputObject =
  | Extract<keyof BoPropCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'required', alias?: string  } 
  | { name: 'unique', alias?: string  } 
  | { name: 'redundant', alias?: string  } 
  | { name: 'linkBo', alias?: string  } 
  | { name: 'linkEnumType', alias?: string  } 
  
export interface BoCreateOneWithoutPropsInput {
  create?: BoCreateWithoutPropsInput | null
  connect?: BoWhereUniqueInput | null
}
export type BoCreateOneWithoutPropsInputInputObject =
  | Extract<keyof BoCreateOneWithoutPropsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BoCreateWithoutPropsInput {
  name?: string | null
  desc?: string | null
  wikiUrl?: string | null
  details?: BoCreateManyInput | null
}
export type BoCreateWithoutPropsInputInputObject =
  | Extract<keyof BoCreateWithoutPropsInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  | { name: 'details', alias?: string  } 
  
export interface BoPropUpdateInput {
  name?: string | null
  desc?: string | null
  type?: string | null
  required?: boolean | null
  unique?: boolean | null
  redundant?: boolean | null
  linkBo?: BoUpdateOneWithoutPropsInput | null
  linkEnumType?: EnumTypeUpdateOneInput | null
}
export type BoPropUpdateInputInputObject =
  | Extract<keyof BoPropUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'required', alias?: string  } 
  | { name: 'unique', alias?: string  } 
  | { name: 'redundant', alias?: string  } 
  | { name: 'linkBo', alias?: string  } 
  | { name: 'linkEnumType', alias?: string  } 
  
export interface BoUpdateOneWithoutPropsInput {
  create?: BoCreateWithoutPropsInput | null
  update?: BoUpdateWithoutPropsDataInput | null
  upsert?: BoUpsertWithoutPropsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: BoWhereUniqueInput | null
}
export type BoUpdateOneWithoutPropsInputInputObject =
  | Extract<keyof BoUpdateOneWithoutPropsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface BoUpdateWithoutPropsDataInput {
  name?: string | null
  desc?: string | null
  wikiUrl?: string | null
  details?: BoUpdateManyInput | null
}
export type BoUpdateWithoutPropsDataInputInputObject =
  | Extract<keyof BoUpdateWithoutPropsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  | { name: 'details', alias?: string  } 
  
export interface BoUpsertWithoutPropsInput {
  update?: BoUpdateWithoutPropsDataInput
  create?: BoCreateWithoutPropsInput
}
export type BoUpsertWithoutPropsInputInputObject =
  | Extract<keyof BoUpsertWithoutPropsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface BoPropUpdateManyMutationInput {
  name?: string | null
  desc?: string | null
  type?: string | null
  required?: boolean | null
  unique?: boolean | null
  redundant?: boolean | null
}
export type BoPropUpdateManyMutationInputInputObject =
  | Extract<keyof BoPropUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'required', alias?: string  } 
  | { name: 'unique', alias?: string  } 
  | { name: 'redundant', alias?: string  } 
  
export interface PageCreateInput {
  name?: string | null
  desc?: string | null
  project?: string | null
  system?: string | null
  domain?: string | null
  type?: string | null
  wikiUrl?: string | null
  bos?: BoCreateManyInput | null
  enums?: EnumTypeCreateManyInput | null
}
export type PageCreateInputInputObject =
  | Extract<keyof PageCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'system', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  | { name: 'bos', alias?: string  } 
  | { name: 'enums', alias?: string  } 
  
export interface EnumTypeCreateManyInput {
  create?: EnumTypeCreateInput[]
  connect?: EnumTypeWhereUniqueInput[]
}
export type EnumTypeCreateManyInputInputObject =
  | Extract<keyof EnumTypeCreateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PageUpdateInput {
  name?: string | null
  desc?: string | null
  project?: string | null
  system?: string | null
  domain?: string | null
  type?: string | null
  wikiUrl?: string | null
  bos?: BoUpdateManyInput | null
  enums?: EnumTypeUpdateManyInput | null
}
export type PageUpdateInputInputObject =
  | Extract<keyof PageUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'system', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  | { name: 'bos', alias?: string  } 
  | { name: 'enums', alias?: string  } 
  
export interface EnumTypeUpdateManyInput {
  create?: EnumTypeCreateInput[]
  update?: EnumTypeUpdateWithWhereUniqueNestedInput[]
  upsert?: EnumTypeUpsertWithWhereUniqueNestedInput[]
  delete?: EnumTypeWhereUniqueInput[]
  connect?: EnumTypeWhereUniqueInput[]
  set?: EnumTypeWhereUniqueInput[]
  disconnect?: EnumTypeWhereUniqueInput[]
  deleteMany?: EnumTypeScalarWhereInput[]
  updateMany?: EnumTypeUpdateManyWithWhereNestedInput[]
}
export type EnumTypeUpdateManyInputInputObject =
  | Extract<keyof EnumTypeUpdateManyInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EnumTypeUpdateWithWhereUniqueNestedInput {
  where?: EnumTypeWhereUniqueInput
  data?: EnumTypeUpdateDataInput
}
export type EnumTypeUpdateWithWhereUniqueNestedInputInputObject =
  | Extract<keyof EnumTypeUpdateWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EnumTypeUpsertWithWhereUniqueNestedInput {
  where?: EnumTypeWhereUniqueInput
  update?: EnumTypeUpdateDataInput
  create?: EnumTypeCreateInput
}
export type EnumTypeUpsertWithWhereUniqueNestedInputInputObject =
  | Extract<keyof EnumTypeUpsertWithWhereUniqueNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EnumTypeScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  desc?: string | null
  desc_not?: string | null
  desc_in?: string[]
  desc_not_in?: string[]
  desc_lt?: string | null
  desc_lte?: string | null
  desc_gt?: string | null
  desc_gte?: string | null
  desc_contains?: string | null
  desc_not_contains?: string | null
  desc_starts_with?: string | null
  desc_not_starts_with?: string | null
  desc_ends_with?: string | null
  desc_not_ends_with?: string | null
  wikiUrl?: string | null
  wikiUrl_not?: string | null
  wikiUrl_in?: string[]
  wikiUrl_not_in?: string[]
  wikiUrl_lt?: string | null
  wikiUrl_lte?: string | null
  wikiUrl_gt?: string | null
  wikiUrl_gte?: string | null
  wikiUrl_contains?: string | null
  wikiUrl_not_contains?: string | null
  wikiUrl_starts_with?: string | null
  wikiUrl_not_starts_with?: string | null
  wikiUrl_ends_with?: string | null
  wikiUrl_not_ends_with?: string | null
  AND?: EnumTypeScalarWhereInput[]
  OR?: EnumTypeScalarWhereInput[]
  NOT?: EnumTypeScalarWhereInput[]
}
export type EnumTypeScalarWhereInputInputObject =
  | Extract<keyof EnumTypeScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'desc_not', alias?: string  } 
  | { name: 'desc_in', alias?: string  } 
  | { name: 'desc_not_in', alias?: string  } 
  | { name: 'desc_lt', alias?: string  } 
  | { name: 'desc_lte', alias?: string  } 
  | { name: 'desc_gt', alias?: string  } 
  | { name: 'desc_gte', alias?: string  } 
  | { name: 'desc_contains', alias?: string  } 
  | { name: 'desc_not_contains', alias?: string  } 
  | { name: 'desc_starts_with', alias?: string  } 
  | { name: 'desc_not_starts_with', alias?: string  } 
  | { name: 'desc_ends_with', alias?: string  } 
  | { name: 'desc_not_ends_with', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  | { name: 'wikiUrl_not', alias?: string  } 
  | { name: 'wikiUrl_in', alias?: string  } 
  | { name: 'wikiUrl_not_in', alias?: string  } 
  | { name: 'wikiUrl_lt', alias?: string  } 
  | { name: 'wikiUrl_lte', alias?: string  } 
  | { name: 'wikiUrl_gt', alias?: string  } 
  | { name: 'wikiUrl_gte', alias?: string  } 
  | { name: 'wikiUrl_contains', alias?: string  } 
  | { name: 'wikiUrl_not_contains', alias?: string  } 
  | { name: 'wikiUrl_starts_with', alias?: string  } 
  | { name: 'wikiUrl_not_starts_with', alias?: string  } 
  | { name: 'wikiUrl_ends_with', alias?: string  } 
  | { name: 'wikiUrl_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EnumTypeUpdateManyWithWhereNestedInput {
  where?: EnumTypeScalarWhereInput
  data?: EnumTypeUpdateManyDataInput
}
export type EnumTypeUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EnumTypeUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EnumTypeUpdateManyDataInput {
  name?: string | null
  desc?: string | null
  wikiUrl?: string | null
}
export type EnumTypeUpdateManyDataInputInputObject =
  | Extract<keyof EnumTypeUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  
export interface PageUpdateManyMutationInput {
  name?: string | null
  desc?: string | null
  project?: string | null
  system?: string | null
  domain?: string | null
  type?: string | null
  wikiUrl?: string | null
}
export type PageUpdateManyMutationInputInputObject =
  | Extract<keyof PageUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'desc', alias?: string  } 
  | { name: 'project', alias?: string  } 
  | { name: 'system', alias?: string  } 
  | { name: 'domain', alias?: string  } 
  | { name: 'type', alias?: string  } 
  | { name: 'wikiUrl', alias?: string  } 
  
export interface EnumTypeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EnumTypeWhereInput | null
  AND?: EnumTypeSubscriptionWhereInput[]
  OR?: EnumTypeSubscriptionWhereInput[]
  NOT?: EnumTypeSubscriptionWhereInput[]
}
export type EnumTypeSubscriptionWhereInputInputObject =
  | Extract<keyof EnumTypeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EnumPropSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EnumPropWhereInput | null
  AND?: EnumPropSubscriptionWhereInput[]
  OR?: EnumPropSubscriptionWhereInput[]
  NOT?: EnumPropSubscriptionWhereInput[]
}
export type EnumPropSubscriptionWhereInputInputObject =
  | Extract<keyof EnumPropSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BoSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: BoWhereInput | null
  AND?: BoSubscriptionWhereInput[]
  OR?: BoSubscriptionWhereInput[]
  NOT?: BoSubscriptionWhereInput[]
}
export type BoSubscriptionWhereInputInputObject =
  | Extract<keyof BoSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface BoPropSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: BoPropWhereInput | null
  AND?: BoPropSubscriptionWhereInput[]
  OR?: BoPropSubscriptionWhereInput[]
  NOT?: BoPropSubscriptionWhereInput[]
}
export type BoPropSubscriptionWhereInputInputObject =
  | Extract<keyof BoPropSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PageSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PageWhereInput | null
  AND?: PageSubscriptionWhereInput[]
  OR?: PageSubscriptionWhereInput[]
  NOT?: PageSubscriptionWhereInput[]
}
export type PageSubscriptionWhereInputInputObject =
  | Extract<keyof PageSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type EnumPropOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'key_ASC'
  | 'key_DESC'
  | 'value_ASC'
  | 'value_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type EnumTypeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'desc_ASC'
  | 'desc_DESC'
  | 'wikiUrl_ASC'
  | 'wikiUrl_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type BoPropOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'desc_ASC'
  | 'desc_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'required_ASC'
  | 'required_DESC'
  | 'unique_ASC'
  | 'unique_DESC'
  | 'redundant_ASC'
  | 'redundant_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type BoOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'desc_ASC'
  | 'desc_DESC'
  | 'wikiUrl_ASC'
  | 'wikiUrl_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PageOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'desc_ASC'
  | 'desc_DESC'
  | 'project_ASC'
  | 'project_DESC'
  | 'system_ASC'
  | 'system_DESC'
  | 'domain_ASC'
  | 'domain_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'wikiUrl_ASC'
  | 'wikiUrl_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  